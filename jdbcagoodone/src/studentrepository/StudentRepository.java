package studentrepository;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import student.Student;
import util.DBUtil;

public class StudentRepository {

	// in the line below we have created a new method called getAllStudents so that we can access its materials from other classes
	// we made is static so we can access it immedietly. we dont need to create an object  if we want to use it in another class
	///List<student> is the return type because we want to get the students which can be  more than one student
	/// argument is what we enter ,for example get student by ID 
	///  a phone is a class but a screen 
	///* why do we use static?? lets say we have company which has one ceo, 
	/// and all the empoyees are working for this ceo. thus all of the employeess wil have the same ceo, however their salary and id will be diff.
	/// so there are two diff objects but they have the same ceo, so to make sure that the ceo is not object specific, and it is for all the objects, we make it static.
	/// whenever we want to create an object we must load the class,because we create the object inside heep memory,
	/// after creating the object we can hv many varibles inside it
	/// static varibales are the variables which are same for all the objects
	///List<Student> is the return type(what will come out) because we are expecting to get something, and list hear means we maight get more than one student and student is the return type.
	/// if there is arguments in the method, that means that is something which will enter, for example the argument(what will enter) is give the student with id of 4
	
		
	
		////list is a collection f objects
		/// array is collection elements
		// /Arraylist is a build-in collection
		///for the line below is You need some place to store every Student added to the course, that is what the ArrayList is for 		
		
	public static List<Student> addstudents() {
	List<Student> studentList = new ArrayList<>();
/// the line below we used try because maybe there is an error during run time which might crash the program.

		try {
	// the line below has created the variable  con of type connection class  to be able to access the getConnection  method from the class DBUtil which is to get connected to the database
	Connection con = DBUtil.getConnection();
	
	// in the line below we are creating an object, which means we are creating a variable(stmt) of statement class type and we wants it to access the material from create statement which we will create queries and send data.
	/// the object in the below line is created to use it in the next line to create queries and send data.
	///* in the line below statement will only execute the query (a command to extract information from a database). but in the next line we use it to get the data from student table(ResultSet)
	Statement stmt = con.createStatement();
	
	
	//A ResultSet object is a table of data representing a database result set, which is usually generated by executing a statement that queries the database. For example, the CoffeeTables.viewTable method creates a ResultSet, rs, when it executes the query through the Statement object, stmt. Note that a ResultSet object can be created through any object that implements the Statement interface, including PreparedStatement, CallableStatement, and RowSet.
	//You access the data in a ResultSet object through a cursor. Note that this cursor is not a database cursor. This cursor is a pointer that points to one row of data in the ResultSet. Initially, the cursor is positioned before the first row. The method ResultSet.next moves the cursor to the next row. This method returns false if the cursor is positioned after the last row. This method repeatedly calls the ResultSet.next method with a while loop to iterate through all the data in the ResultSet.
	// in the line below we are creating an object, which means we are creating a local variable(rs) of ResultSet class , and tht refers to the stmt variable which we created earlier in the above line  and it uses the createstatement to execute the values from the selected table from sql.
	///A query is a request for data or information from a database table or combination of tables.
	///* and in the lines after the result set we are getting the data from  the database using if and while and whatever is in the while looop.
	ResultSet rs = stmt.executeQuery("select * from student");
	
	/// the line below means if the table in sql is not null then get it and store it in the object we created.
	if(rs!= null) {
		
		///rs.next means it checks row by row
		while(rs.next()) {
			// in the line below we have created the variable of type Student class and and
			//it will allocate space for that particular variable and we want to assign the created object to this variable
			//whenever we create an object  for a class, we meed to create a constractor in that class as well
			
			///  after getting the data from database we have created the object student to create memory so we can store it in the class Student
			Student student = new Student();
			// student.setId  means we are accessing the setId by the object student which is of type Student class
			/// the four lines below means getting the datas from the database and setting them in java so that we can display it on the screen
			student.setId(rs.getInt(1));
			student.setName(rs.getString(2));
			student.setEmail(rs.getString(3));
			student.setWeight(rs.getDouble(4));
			studentList.add(student);
			
			
			// the line above is to This is how you add to a List (in this case a List of
			//Student objects and more precisely an ArrayList of Students).
			// the lines above is to this how you add to a list in thus case  a list of the student
		}	
	}
}
		catch (SQLException e) {
			e.printStackTrace();
			return null;
		}
		
	return studentList;
	
}
	public static Student getStudentById(int id) {
		// we create the object to prepare it to store the id and it is an empty memory
		 Student student  = new Student(); 
		 
		 try {
			 
			 Connection con = DBUtil.getConnection();
			
			 ///the PreparedStatement we want an object from it, the object will be instantiated using the con.preparedStatemnt because connection class has an object called preparedStatement.
			 ///inside the () is the string which is the parameter which is the query
				///* in the line below statement will only execute the query (a command to extract information from a database). but in the next line we use it to get the data from student table(ResultSet)

			 PreparedStatement statement = con.prepareStatement("select from student where id = ?");
			 statement.setInt(1,id);
			 
			 ResultSet rs  = statement.executeQuery();
			 
			 
			 if (rs !=  null) {
				 
				 if(rs.next()) {
						student.setId(rs.getInt(1));
						student.setName(rs.getString(2));
						student.setEmail(rs.getString(3));
						student.setWeight(rs.getDouble(4));
				 }
			 }	 
	}
		 
		 catch (SQLException e) {
				e.printStackTrace();
				return null;
			}
			return student; 
		 }	 
	public static List<Student> getStudentByEmail(String email){
		
		return null;
	}
	public static List<Student> getStudentByName(String name){
		return null;
	}

	//public means  it is accessable
	//we wrote static so we dont have to create the object.
	//return type is boolean-
	//(Student is user defined data type which refers to the class Student and std is the variable which points to the class Student)
	public static  boolean insertStudent( Student std){ {
	
		boolean result = false;		
	try {
		Connection con = DBUtil.getConnection();
		//3.after the communication is done, now we want to execute some queries, which are inserting, updating,deleting or deleting data.
		String query = " insert into student (name, email,weight ) values (?,?, ?) ";
		//4.the line which can be statement or prepared statement is used to execute the query 
		// the lines below is to connect to database and execute the query
		PreparedStatement preparedStmt = con.prepareStatement(query);
		
		preparedStmt.setString(1,std.getName());
		preparedStmt.setString(2,std.getEmail());
		preparedStmt.setDouble(3,std.getWeight());
		result = preparedStmt.execute();
	}	
	catch (SQLException e) {
		e.printStackTrace();
	}
	return result;

	}
}
	
}

